<?phpnamespace models;use config\connection;use const http\Client\Curl\Versions\IDN;require_once '../config/connection.php';class recipe extends connection{  public function store(int $productId,int $ingredientId,int $quantityRequired):void  {      $query = "INSERT INTO recipe(product_id, ingredient_id, quantity_required) VALUES (?,?,?)";      $stmt = $this->Connect()->prepare($query);      $stmt->bind_param('iid',$productId,$ingredientId,$quantityRequired);      if ($stmt->execute()){          echo json_encode(['success' => true, 'message' => 'Successfully Added New Recipe']);      }else{          echo json_encode(['success' => false, 'message' => 'Error: '.$stmt->error]);      }  }  public function showAll(string $status):array  {      $query = "SELECT * FROM recipe WHERE status = ?";      $stmt = $this->Connect()->prepare($query);      $stmt->bind_param('s',$status);      $stmt->execute();      $result = $stmt->get_result();      $dataRow = [];      if ($result->num_rows > 0){          while ($row = $result->fetch_assoc()){              $dataRow[] = $row;          }          return $dataRow;      }      return [];  }public function archive(string $status, int $id):void // this method is for archiving the recipe base on id{    $query = "UPDATE recipe SET status = ? WHERE recipe_id = ?";    $stmt = $this->Connect()->prepare($query);    if (!$stmt){        echo json_encode(['success' => false, 'message' => 'Failed to Prepared statement']);        return;    }    $stmt->bind_param('si',$status,$id);    if ($stmt->execute()){        echo json_encode(['success' => true, 'message' => 'Successfully Deleted']);    }else{        echo json_encode(['success' => false, 'message' => 'Error'.$stmt->error]);    }}public function showBaseOnId(int $id):array{    $query = "SELECT quantity_required FROM recipe WHERE recipe_id = ?";    $stmt = $this->Connect()->prepare($query);    $stmt->bind_param('s',$id);    $stmt->execute();    $result = $stmt->get_result();    return $result->fetch_assoc();}public function update(int $quantity, int $id):void{    $query = "UPDATE recipe SET quantity_required = ? WHERE recipe_id = ?";    $stmt = $this->Connect()->prepare($query);    if (!$stmt){        echo json_encode(['success' => false, 'message' => 'Failed to Prepared Statement']);        return;    }    $stmt->bind_param('di',$quantity,$id);    if ($stmt->execute()){        echo json_encode(['success' => true, 'message' => 'Successfully Update']);    }else{        echo json_encode(['success' => false, 'message' => 'Error'.$stmt->error]);    }}    public function countRecipe( string $status):int    {        $query = "SELECT COUNT(*) AS counted FROM recipe WHERE status = ?";        $stmt = $this->Connect()->prepare($query);        $stmt->bind_param('s',$status);        $stmt->execute();        $result = $stmt->get_result();        $row = $result->fetch_assoc();        return (int) $row['counted'];    }}