<?phpnamespace models;use config\connection;require_once '../config/connection.php';class cashier extends connection{  public function showProductList($status,$productStatus):array  {      $query = "SELECT    DISTINCT     p.productId AS Product_ID,    p.productName AS Product_Name,    p.price,    p.product_Image AS Product_Image,    GROUP_CONCAT(i.ingredientId SEPARATOR ', ') AS Ingredient_IDs,    GROUP_CONCAT(i.ingredient_Name SEPARATOR ', ') AS IngredientsFROM    product p        JOIN    recipe r ON p.productId = r.product_id        JOIN    ingredients i ON r.ingredient_id = i.ingredientIdWHERE     i.status = ?     AND p.status = ?GROUP BY    p.productId, p.productName, p.price, p.product_Image;";      $stmt = $this->Connect()->prepare($query);      $stmt->bind_param('ss',$status,$productStatus);      $stmt->execute();      $result = $stmt->get_result();      if ($result->num_rows > 0){           $dataRow = [];           while ($row = $result->fetch_assoc()){               $dataRow[] = $row;           }           return $dataRow;      }  return [];  }    public function decreaseIngredients($ingredientIds, $productId, $productQuantity):void    {        // Convert ingredient IDs into an array if not already        $ingredientIdArray = explode(',', $ingredientIds);        // Create placeholders dynamically        $ingredientPlaceholders = implode(',', array_fill(0, count($ingredientIdArray), '?'));        // Query for reducing stock        $query = "    UPDATE ingredients i    JOIN (        SELECT            r.ingredient_id AS Ingredient_ID,            SUM(r.quantity_required * ?) AS Total_Quantity_Required        FROM            recipe r        WHERE            r.ingredient_id IN ($ingredientPlaceholders) AND r.product_id = ?        GROUP BY            r.ingredient_id    ) AS calculated ON i.ingredientId = calculated.Ingredient_ID    SET        i.stock_quantity = i.stock_quantity - calculated.Total_Quantity_Required;    ";        // Prepare the statement        $stmt = $this->Connect()->prepare($query);        // Dynamically bind the product quantity, ingredient IDs, and product ID        $types = 'i' . str_repeat('i', count($ingredientIdArray)) . 'i'; // 'i' for integers        $params = array_merge([$productQuantity], $ingredientIdArray, [$productId]);        $stmt->bind_param($types, ...$params);        // Execute the query and handle errors        if ($stmt->execute()) {            return;        } else {            echo json_encode(['success' => false, 'message' => 'Error: ' . $stmt->error]);        }    }    public function storeSales($quantitySold, $productId, $sales_Date, $total, $image, $discountType) {        // Define discount rates        $discountRates = [            'none' => 0,            'pwd' => 0.20,  // 20% discount            'senior' => 0.20 // 20% discount        ];        // Compute discounted total        $discountAmount = $total * ($discountRates[$discountType] ?? 0);        $discountedTotal = $total - $discountAmount;        // Adjust the SQL query to include discount        $query = "INSERT INTO sales (quantity_sold, product_Id, sales_created, total_price, discount_type, discounted_price, image)               VALUES (?, ?, ?, ?, ?, ?, ?)";        $stmt = $this->Connect()->prepare($query);        $stmt->bind_param("iisdsss", $quantitySold, $productId, $sales_Date, $total, $discountType, $discountedTotal, $image);        return $stmt->execute();    }    public function checkStockLevels($ingredientIds, $productQuantity): array    {        // Convert ingredient IDs into an array        $ingredientIdArray = explode(',', $ingredientIds);        // Create placeholders dynamically        $ingredientPlaceholders = implode(',', array_fill(0, count($ingredientIdArray), '?'));        // Query to check stock levels        $query = "        SELECT             i.ingredientId,             i.stock_quantity,            (r.quantity_required * ?) AS required_quantity        FROM ingredients i        JOIN recipe r ON i.ingredientId = r.ingredient_id        WHERE i.ingredientId IN ($ingredientPlaceholders)        GROUP BY i.ingredientId        HAVING stock_quantity < required_quantity;    ";        // Prepare the statement        $stmt = $this->Connect()->prepare($query);        // Dynamically bind the product quantity and ingredient IDs        $types = 'i' . str_repeat('i', count($ingredientIdArray)); // 'i' for integers        $params = array_merge([$productQuantity], $ingredientIdArray);        $stmt->bind_param($types, ...$params);        // Execute and fetch the results        $stmt->execute();        $result = $stmt->get_result();        // Collect ingredients with low or no stock        $lowStockIngredients = [];        while ($row = $result->fetch_assoc()) {            $lowStockIngredients[] = $row;        }        return $lowStockIngredients;    }    public function showAll():array    {        $result = $this->Connect()->query("     SELECT product_Id,       image,       SUM(total_price) AS TotalSales,       MIN(sales_created) AS FirstOrderDate,       MAX(sales_created) AS LastOrderDate        FROM sales        GROUP BY product_Id        ORDER BY product_Id;");        $dataRow = [];        if ($result->num_rows > 0){            while ($row = $result->fetch_assoc()){                $dataRow[] = $row;            }            return $dataRow;        }        return [];    }    // handle catgeory search    public function showByCategory( string $category, string $status):array    {        $query = "SELECT    DISTINCT     p.productId AS Product_ID,    p.productName AS Product_Name,    p.price,    p.product_Image AS Product_Image,    GROUP_CONCAT(i.ingredientId SEPARATOR ', ') AS Ingredient_IDs,    GROUP_CONCAT(i.ingredient_Name SEPARATOR ', ') AS IngredientsFROM    product p        JOIN    recipe r ON p.productId = r.product_id        JOIN    ingredients i ON r.ingredient_id = i.ingredientId where i.status = ? AND category = ? AND p.status = 'Active'GROUP BY    p.productId, p.productName, p.price, p.product_Image;";        $stmt = $this->Connect()->prepare($query);        if (!$stmt){            echo json_encode(['success' => false, 'message' => 'Failed to Prepared Statemant']);        }        $stmt->bind_param('ss',$status,$category);        $stmt->execute();        $result = $stmt->get_result();        $dataArray = [];        if ($result->num_rows > 0){            while ($row = $result->fetch_assoc()){                $dataArray[] = $row;            }            return $dataArray;        }            return [];    }}