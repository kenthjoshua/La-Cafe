<?phpnamespace models;use config\connection;require_once '../config/connection.php';class product extends connection{    public function store($productName,$image,$price,$category): void    {        $query = "INSERT INTO product(productName, product_Image, price, category)VALUES(?,?,?,?)";        $stmt = $this->Connect()->prepare($query);        $stmt->bind_param('ssds',$productName,$image,$price,$category);        if (!$stmt->execute()){            echo json_encode(['success' => false, 'message' => 'Error in Prepared Statement'.$stmt->error]);            return;        }        echo json_encode(['success' => true, 'message' => 'Successfully Added New Product']);    }    // display all the product base on status    public function showAll($status):array    {        $query = "SELECT DISTINCT * FROM product WHERE status = ?";        $stmt = $this->Connect()->prepare($query);        $stmt->bind_param('s',$status);        $stmt->execute();        $result = $stmt->get_result();        $dataRow = [];        if($result->num_rows > 0){           while ($row = $result->fetch_assoc()){               $dataRow[] = $row;           }           return $dataRow;        }        return [];    }// show product details base on productId    public function showBaseOnId($productId):array    {         $query = "SELECT productName,product_Image,price FROM product WHERE productId = ?";         $stmt = $this->Connect()->prepare($query);         $stmt->bind_param('i',$productId);         $stmt->execute();         $result = $stmt->get_result();         $dataRow = [];         if ($result->num_rows > 0){           while ($row = $result->fetch_assoc()){               $dataRow[] = $row;           }             $stmt->close();             $this->Connect()->close();           return $dataRow;         }         return  [];    }    // update product base on ProductId    public function updateBaseOnId($productName,$image,$price, $id):void    {       $query = "UPDATE product SET productName = ?,product_Image = ? ,price = ? WHERE productId = ?";       $stmt = $this->Connect()->prepare($query);       $stmt->bind_param('ssdi',$productName,$image,$price,$id);       if ($stmt->execute()){           echo json_encode(['success' => true, 'message' => 'Successfully Update']);       }else{           echo json_encode(['success' => false, 'message' => 'Error'.$stmt->error]);       }       $stmt->close();       $this->Connect()->close();    }    public function ArchiveProduct(string $status,int $productId):void    {        $query = "UPDATE product SET status = ? WHERE productId = ?";        $stmt = $this->Connect()->prepare($query);        $stmt->bind_param('si',$status,$productId);        if ($stmt->execute()){            echo json_encode(['success' => true, 'message' => 'Product is Successfully Deleted']);        }else{            echo json_encode(['success' => false, 'message' => 'Error'.$stmt->error]);        }        $stmt->close();        $this->Connect()->close();    }    public function countProductList( string $status):int    {        $query = "SELECT COUNT(*) AS counted FROM product WHERE status = ?";        $stmt = $this->Connect()->prepare($query);        $stmt->bind_param('s',$status);        $stmt->execute();        $result = $stmt->get_result();        $row = $result->fetch_assoc();        return (int) $row['counted'];    }    public function showProductNameBaseOnId($id):array    {        $query = "SELECT productName FROM product WHERE productId = ?";        $stmt = $this->Connect()->prepare($query);        $stmt->bind_param('i',$id);        $stmt->execute();        $result = $stmt->get_result();        $productName = $result->fetch_assoc();        return ['productName' => $productName['productName']];    }}