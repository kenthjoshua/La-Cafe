<?phpnamespace controller;use models\recipe;include '../models/recipe.php';class recipeController{ public function store():void {      $fields = [        'productId' => 'Please Select Product',        'ingredientId'  => 'Please Select Ingredient',          'quantityRequired' => 'Quantity is Required'      ];      $data = [];      $error = [];      foreach ($fields as $field => $message){          if (!isset($_POST[$field]) || trim($_POST[$field]) === ''){              $error[$field] = $message;          }else{              $data[$field] = htmlspecialchars($_POST[$field]);          }      }      if (!empty($error)){          $data['success'] = false;          $data['errors'] = $error;          echo json_encode($data);          return;      }      $recipe = new recipe();      $recipe->store($data['productId'],$data['ingredientId'],$data['quantityRequired']); } public function showAdd($status):void {     $recipes = new recipe();    $data = $recipes->showAll($status);    $table = '';    if ($data){        foreach ($data as $row){            $table .= '                <tr>                   <td>'.$row['recipe_id'].'</td>                    <td>'.$row['product_id'].'</td>                     <td>'.$row['ingredient_id'].'</td>                         <td>'.$row['quantity_required'].'</td>                         <td>                            <button style="background-color: #6610F2" id="btnEditRecipe" value="'.$row['recipe_id'].'" class="btn badge text-light">Edit</button>                            <button  style="background-color: #6610F2"  id="btnArchive" value="'.$row['recipe_id'].'" class="btn badge text-light">Archive</button>                          </td>                </tr>            ';        }        echo $table;    } } public function showBaseOnId():void {     $Id = trim($_POST['Id']);     $recipe = new recipe();     $modal = '';     $modal = '       <!-- Modal -->       <div class="modal fade" id="modalUpdate_recipe_'.$Id.'" tabindex="-1" aria-labelledby="exampleModalLabel" data-bs-backdrop="static" aria-hidden="true">    <form id="form_recipeUpdate" class="modal-dialog modal-dialog-centered">        <div class="modal-content">            <div style="background-color: #6610F2" class="modal-header">                <h1 class="modal-title fs-6 text-light" id="exampleModalLabel">Update Recipe</h1>                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>            </div>            <div class="modal-body">                <div class="form-floating mb-3">                    <input name="quantityStock" min="1" type="number" value="'.$recipe->showBaseOnId($Id)['quantity_required'].'" class="form-control" id="stock">                    <label for="stock">stock Quantity</label>                </div>            </div>            <input type="hidden" name="Id"  value="'.$Id.'">            <div class="modal-footer">                <button  type="button" class="btn bg-danger text-light bg-opacity-75" data-bs-dismiss="modal">Close</button>                <button style="background-color: #6610F2" type="submit" class="btn text-light">                    Save Changes                </button>            </div>        </div>    </form>     ';     echo $modal; } public function update():void {     $Id = trim($_POST['Id']);     $quantityStock = trim($_POST['quantityStock']);     if (!isset($Id)){         echo json_encode(['success' => false, 'message' => 'No Id probated']);         return;     }     if (empty($quantityStock)){         echo json_encode(['success' => false, 'message' => 'stock quantity is required']);         return;     }     $recipe = new recipe();     $recipe->update($quantityStock,$Id); } public function archive():void {     $Id = trim($_POST['recipeId']);     $status = 'isDeleted';     if (!isset($Id)){         echo json_encode(['success' => false, 'message' => 'No Id probated']);         return;     }     $recipe = new recipe();     $recipe->archive($status,$Id); }    public function countRecipe():void    {        $countCategory = new  recipe();        $counted = $countCategory->countRecipe('Active');        echo json_encode($counted);    }}if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])){    $recipe = new recipeController();    switch ($_POST['action']){        case 'store':            $recipe->store();            break;            case 'showBaseOnId';            $recipe->showBaseOnId();            break;        case 'update':            $recipe->update();            break;        case 'archive':            $recipe->archive();            break;        case 'counted':            $recipe->countRecipe();            break;    }}